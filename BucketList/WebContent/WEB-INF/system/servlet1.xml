<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mybatis="http://mybatis.org/schema/mybatis-spring" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
							http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd 
							http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd 
							http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd 
							 http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- MVC:annotation-driven -->
	<mvc:annotation-driven />
	
	<!-- vo Bean을 참고하는 Controller bean 등록 by beans.xml -->
	<bean class="com.bucketlist.home.Mainmenu">
		<property name="vo" ref="vo" />
	</bean>
	
<!-- 시작 : MyBatis를 위한 태그들 -->
	<!-- sqlSessionFactory :
		SqlSession를 생성하기 위해 SqlSessionFactory를 사용한다
		세션을 한번 생성하면 매핑구문을 실행하거나 커밋 또는 롤백을 하기 위해 세션을 사용할수 있다
		마이바티스 스프링 연동모듈을 사용하면 SqlSessionFactory를 직접 사용할 필요가 없다. 
		왜냐하면, 
			스프링 트랜잭션 설정에 따라 자동으로 커밋 혹은 롤백을 수행하고 닫혀지는, 
			쓰레드에 안전한 SqlSession 개체가 스프링 빈에 주입될 수 있기 때문이다. 
	-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"> 
		<property name="dataSource" ref="dataSource"/> 
		<!-- mapperLocations : 마이바티스의 XML매퍼 파일들의 위치를 지정하기 위해 사용 -->
			<!-- <property name="mapperLocations" value="classpath:mybatis/mapper/usermapper_m.xml"/>  -->
		<!-- configLocation : 마이바티스 XML설정파일의 위치를 지정 (WebContent 폴더 안에서도 인식했다.) -->
			<property name="configLocation" value="classpath:mybatis/mapper/mybatis_config.xml"/>
	</bean>

	<!-- SqlSessionTemplate : 
		마이바티스 스프링 연동모듈의 핵심 
		쓰레드에 안전하고 여러개의 DAO나 매퍼에서 공유할수 있다
		매퍼가 마이바티스 메서드를 호출할때 SqlSession이 현재의 스프링 트랜잭션에서 사용될수 있도록 보장한다
		커밋하거나 롤백하는 것을 포함한 세션의 생명주기를 관리한다
		마이바티스 예외를 스프링의 DataAccessException로 변환하는 작업또한 처리한다
	-->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate"> 
		<constructor-arg index="0" ref="sqlSessionFactory"></constructor-arg>
	</bean>

	<!-- SqlSessionTemplate 를 주입 -->
	<bean id="guestDao" class="com.bucketlist.home.GuestBrdServiceImpl">
	  <!-- <property name="sqlSession" ref="sqlSession" /> -->
	  <property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	
	<!-- 소스코드에 어노테이션 트랜잭션을 활용할 때-->
	<!-- <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> 
		<property name="dataSource" ref="dataSource"></property> 
	</bean> -->
	<!--@Transactional 사용을 위한 태그 --><!-- <tx:annotation-driven transaction-manager="transactionManager"/>  -->

	<!-- BoardService : (서비스)DAO와 컨트롤러의 중간역할.  -->
	<!-- <bean id="boardService" class="com.we2.sharepjtboard.PjtBoardService"/> -->
	
	<!-- BoardMapper 등록 영역 ( id = 변수명 ) - Mapper interface 스캔  -->
	<!-- <mybatis:scan base-package="*" /> -->

<!-- 끝 : MyBatis를 위한 태그들 -->
</beans>